import{s as g}from"./auth-C16P3Hdi.js";const u={async getUserSessions(n,e){try{let t=g.from("sessions").select("*").contains("participants",[n]).order("date",{ascending:!1});e&&(t=t.eq("status",e));const{data:r,error:a}=await t;if(a)throw a;return r?.map(o=>({id:o.id,participants:o.participants,date:new Date(o.date),startTime:o.start_time,endTime:o.end_time,status:o.status,createdAt:new Date(o.created_at)}))||[]}catch(t){throw console.error("Error fetching user sessions:",t),t}},async getCurrentWeekSessions(n){try{const e=new Date,t=new Date(e),r=e.getDay(),a=r===0?-6:1-r;t.setDate(e.getDate()+a),t.setHours(0,0,0,0);const o=new Date(t);o.setDate(t.getDate()+6),o.setHours(23,59,59,999);const{data:i,error:s}=await g.from("sessions").select("*").contains("participants",[n]).gte("date",t.toISOString().split("T")[0]).lte("date",o.toISOString().split("T")[0]).in("status",["confirmed","completed"]);if(s)throw s;const c=i?.map(l=>({id:l.id,participants:l.participants,date:new Date(l.date),startTime:l.start_time,endTime:l.end_time,status:l.status,createdAt:new Date(l.created_at)}))||[],d=c.filter(l=>l.status==="completed").length,m=c.length;return{completed:d,total:m,sessions:c}}catch(e){throw console.error("Error fetching current week sessions:",e),e}},async getUpcomingSessions(n,e=5){try{const t=new Date,r=t.toISOString().split("T")[0],{data:a,error:o}=await g.from("sessions").select("*").contains("participants",[n]).eq("status","confirmed").gte("date",r).order("date",{ascending:!0}).order("start_time",{ascending:!0}).limit(e);if(o)throw o;const i=t.getHours();return a?.map(s=>({id:s.id,participants:s.participants,date:new Date(s.date),startTime:s.start_time,endTime:s.end_time,status:s.status,createdAt:new Date(s.created_at)})).filter(s=>s.date.toDateString()===t.toDateString()?s.endTime>i:!0)||[]}catch(t){throw console.error("Error fetching upcoming sessions:",t),t}},async updateCompletedSessions(n){try{const e=new Date,t=e.toISOString().split("T")[0],r=e.getHours(),{data:a,error:o}=await g.from("sessions").select("*").contains("participants",[n]).eq("status","confirmed").or(`date.lt.${t},and(date.eq.${t},end_time.lte.${r})`);if(o)throw o;if(!a||a.length===0)return 0;const i=a.map(c=>c.id),{error:s}=await g.from("sessions").update({status:"completed",updated_at:new Date().toISOString()}).in("id",i);if(s)throw s;return a.length}catch(e){throw console.error("Error updating completed sessions:",e),e}},async calculateStreak(n){try{const{data:e,error:t}=await g.from("sessions").select("date").contains("participants",[n]).eq("status","completed").order("date",{ascending:!1});if(t)throw t;if(!e||e.length===0)return 0;const r=new Map;e.forEach(m=>{const l=new Date(m.date),h=new Date(l),p=l.getDay(),S=p===0?-6:1-p;h.setDate(l.getDate()+S),h.setHours(0,0,0,0);const y=h.toISOString().split("T")[0];r.set(y,(r.get(y)||0)+1)});const a=Array.from(r.entries()).filter(([,m])=>m>=2).sort((m,l)=>new Date(l[0]).getTime()-new Date(m[0]).getTime());if(a.length===0)return 0;let o=0;const i=new Date,s=i.getDay(),c=s===0?-6:1-s;i.setDate(i.getDate()+c),i.setHours(0,0,0,0);let d=new Date(i);for(let m=0;m<a.length;m++){const l=new Date(a[m][0]);if(Math.abs(d.getTime()-l.getTime())>10080*60*1e3)break;o++,d=new Date(l),d.setDate(d.getDate()-7)}return o}catch(e){return console.error("Error calculating streak:",e),0}},async updateUserStats(n){try{const{data:e,error:t}=await g.from("sessions").select("id").contains("participants",[n]).eq("status","completed");if(t)throw t;const r=e?.length||0,a=await this.calculateStreak(n),{error:o}=await g.from("users").update({stats:{total_sessions:r,current_streak:a,badges:[]},updated_at:new Date().toISOString()}).eq("id",n);if(o)throw o}catch(e){throw console.error("Error updating user stats:",e),e}}},T={async initializeBadges(){try{console.log("BadgeService: Initializing badges...");const{data:n,error:e}=await g.from("badges").select("count").limit(1);if(e)return console.error("BadgeService: Error checking existing badges:",e),!1;if(n&&n.length>0)return console.log("BadgeService: Badges already initialized"),!0;console.log("BadgeService: No badges found, creating default badges...");const t=[{id:"first-week",name:"Getting Started",description:"Complete your first week of workouts",criteria:"Complete first week with 2 sessions",icon:"🎯",category:"progress"},{id:"consistency-5",name:"Steady Gains",description:"Maintain consistency for 5 weeks",criteria:"5 consecutive weeks with 2+ sessions each",icon:"📈",category:"consistency"},{id:"consistency-10",name:"Iron Will",description:"Show dedication for 10 weeks",criteria:"10 consecutive weeks with 2+ sessions each",icon:"🔥",category:"consistency"},{id:"unstoppable",name:"Unstoppable Force",description:"Amazing consistency streak",criteria:"20 consecutive weeks with 2+ sessions each",icon:"⚡",category:"consistency"},{id:"quarter-master",name:"Quarter Master",description:"Three months of dedication",criteria:"12 consecutive weeks with 2+ sessions each",icon:"🏆",category:"consistency"},{id:"half-year-hero",name:"Half Year Hero",description:"Six months of commitment",criteria:"25 consecutive weeks with 2+ sessions each",icon:"🌟",category:"consistency"},{id:"yearly-legend",name:"Yearly Legend",description:"A full year of dedication",criteria:"50 consecutive weeks with 2+ sessions each",icon:"👑",category:"consistency"},{id:"sessions-10",name:"Double Digits",description:"Reach your first milestone",criteria:"Complete 10 total gym sessions",icon:"🎲",category:"milestone"},{id:"sessions-50",name:"Half Century",description:"Major achievement unlocked",criteria:"Complete 50 total gym sessions",icon:"💯",category:"milestone"},{id:"century-club",name:"Century Club",description:"Join the elite 100 club",criteria:"Complete 100 total gym sessions",icon:"💎",category:"milestone"},{id:"double-century",name:"Double Century",description:"Elite performer status",criteria:"Complete 200 total gym sessions",icon:"🚀",category:"milestone"},{id:"triple-digits",name:"Triple Digits Champion",description:"Ultimate dedication",criteria:"Complete 300 total gym sessions",icon:"🏅",category:"milestone"},{id:"early-bird",name:"Early Bird",description:"Morning warrior dedication",criteria:"Complete 5 sessions before 8 AM",icon:"🌅",category:"time"},{id:"morning-champion",name:"Morning Champion",description:"Master of morning workouts",criteria:"Complete 25 sessions before 8 AM",icon:"☀️",category:"time"},{id:"night-owl",name:"Night Owl",description:"Evening athlete dedication",criteria:"Complete 5 sessions after 8 PM",icon:"🌙",category:"time"},{id:"night-champion",name:"Night Champion",description:"Master of evening workouts",criteria:"Complete 25 sessions after 8 PM",icon:"🌃",category:"time"},{id:"perfect-month",name:"Monthly Master",description:"Excel in a single month",criteria:"Complete 8+ sessions in any month",icon:"📅",category:"achievement"},{id:"perfect-quarter",name:"Quarterly Champion",description:"Three months of excellence",criteria:"3 consecutive months with 8+ sessions each",icon:"📊",category:"achievement"}],{error:r}=await g.from("badges").insert(t);return r?(console.error("BadgeService: Error inserting default badges:",r),!1):(console.log("BadgeService: Successfully initialized",t.length,"badges"),!0)}catch(n){return console.error("BadgeService: Error during badge initialization:",n),!1}},async getAllBadges(){try{await this.initializeBadges();const{data:n,error:e}=await g.from("badges").select("*").order("created_at",{ascending:!0});if(e)throw e;const t=n?.map(r=>({id:r.id,name:r.name,description:r.description,criteria:r.criteria,icon:r.icon,category:r.category}))||[];return console.log("BadgeService: Loaded",t.length,"badges from database"),t}catch(n){return console.error("BadgeService: Error fetching badges:",n),[]}},async getUserBadges(n){try{const{data:e,error:t}=await g.from("user_badges").select("badge_id").eq("user_id",n);if(t)throw t;return e?.map(r=>r.badge_id)||[]}catch(e){return console.error("Error fetching user badges:",e),[]}},async getBadgesWithProgress(n){try{console.log("BadgeService: Getting badges with progress for user:",n);const[e,t,r]=await Promise.all([this.getAllBadges(),this.getUserBadges(n),u.getUserSessions(n)]);console.log("BadgeService: Found",e.length,"total badges,",t.length,"unlocked badges,",r.length,"user sessions");const a=r.filter(s=>s.status==="completed"),o=await u.calculateStreak(n),i=e.map(s=>{const c=t.includes(s.id),d=this.calculateBadgeProgress(s.id,a,o);return{...s,category:s.category||"general",isUnlocked:c,progress:d.percentage,progressText:d.text}});return console.log("BadgeService: Returning",i.length,"badges with progress"),i}catch(e){return console.error("BadgeService: Error getting badges with progress:",e),[]}},calculateBadgeProgress(n,e,t){const r=e.length,a=e.filter(c=>c.startTime<8).length,o=e.filter(c=>c.startTime>=20).length,i=this.getMonthlySessionCounts(e),s=i.filter(c=>c>=8).length;switch(n){case"first-week":return t>=1?{percentage:100,text:"Completed!"}:{percentage:Math.min(r/2*100,99),text:`${r}/2 sessions this week`};case"consistency-5":return{percentage:Math.min(t/5*100,100),text:`${t}/5 consecutive weeks`};case"consistency-10":return{percentage:Math.min(t/10*100,100),text:`${t}/10 consecutive weeks`};case"unstoppable":return{percentage:Math.min(t/20*100,100),text:`${t}/20 consecutive weeks`};case"quarter-master":return{percentage:Math.min(t/12*100,100),text:`${t}/12 consecutive weeks`};case"half-year-hero":return{percentage:Math.min(t/25*100,100),text:`${t}/25 consecutive weeks`};case"yearly-legend":return{percentage:Math.min(t/50*100,100),text:`${t}/50 consecutive weeks`};case"sessions-10":return{percentage:Math.min(r/10*100,100),text:`${r}/10 total sessions`};case"sessions-50":return{percentage:Math.min(r/50*100,100),text:`${r}/50 total sessions`};case"century-club":return{percentage:Math.min(r/100*100,100),text:`${r}/100 total sessions`};case"double-century":return{percentage:Math.min(r/200*100,100),text:`${r}/200 total sessions`};case"triple-digits":return{percentage:Math.min(r/300*100,100),text:`${r}/300 total sessions`};case"early-bird":return{percentage:Math.min(a/5*100,100),text:`${a}/5 morning sessions`};case"morning-champion":return{percentage:Math.min(a/25*100,100),text:`${a}/25 morning sessions`};case"night-owl":return{percentage:Math.min(o/5*100,100),text:`${o}/5 evening sessions`};case"night-champion":return{percentage:Math.min(o/25*100,100),text:`${o}/25 evening sessions`};case"perfect-month":return{percentage:s>0?100:Math.min(Math.max(...i,0)/8*100,99),text:s>0?"Completed!":`${Math.max(...i,0)}/8 sessions this month`};case"perfect-quarter":{const c=this.getConsecutivePerfectMonths(i);return{percentage:Math.min(c/3*100,100),text:`${c}/3 consecutive perfect months`}}default:return{percentage:0,text:"Not started"}}},async checkAndAwardBadges(n){try{const e=await this.getBadgesWithProgress(n),t=[];for(const r of e)!r.isUnlocked&&r.progress===100&&(await this.awardBadge(n,r.id),t.push({badge:{...r,isUnlocked:!0,unlockedAt:new Date},isNewUnlock:!0}));return t}catch(e){return console.error("Error checking and awarding badges:",e),[]}},async awardBadge(n,e){try{const{error:t}=await g.from("user_badges").insert({user_id:n,badge_id:e,unlocked_at:new Date().toISOString()});if(t)throw t;const{data:r}=await g.from("user_badges").select("badge_id").eq("user_id",n),a=r?.map(o=>o.badge_id)||[];await g.from("users").update({stats:{total_sessions:0,current_streak:0,badges:a},updated_at:new Date().toISOString()}).eq("id",n)}catch(t){throw console.error("Error awarding badge:",t),t}},getMonthlySessionCounts(n){const e={};return n.forEach(t=>{const r=t.date.toISOString().slice(0,7);e[r]=(e[r]||0)+1}),Object.values(e)},getConsecutivePerfectMonths(n){let e=0,t=0;for(const r of n.reverse())r>=8?(e++,t=Math.max(t,e)):e=0;return t},async recheckAllUserBadges(n){try{console.log(`Starting retroactive badge check for user ${n}`);const[e,t,r]=await Promise.all([this.getAllBadges(),this.getUserBadges(n),u.getUserSessions(n)]),a=r.filter(s=>s.status==="completed"),o=await u.calculateStreak(n),i=[];console.log(`User has ${a.length} completed sessions and ${o} week streak`),console.log(`User currently has ${t.length} badges unlocked`);for(const s of e){const c=t.includes(s.id),d=this.calculateBadgeProgress(s.id,a,o);!c&&d.percentage>=100&&(console.log(`Awarding missing badge: ${s.name} (${s.id})`),await this.awardBadge(n,s.id),i.push({badge:{...s,category:s.category||"general",isUnlocked:!0,unlockedAt:new Date,progress:100,progressText:"Completed!"},isNewUnlock:!0}))}return console.log(`Retroactive check complete. Awarded ${i.length} missing badges.`),i}catch(e){throw console.error("Error in retroactive badge check:",e),e}},async checkBadgeConsistency(n){try{const[e,t,r]=await Promise.all([this.getAllBadges(),this.getUserBadges(n),u.getUserSessions(n)]),a=r.filter(c=>c.status==="completed"),o=await u.calculateStreak(n),i=[],s=[];for(const c of e){const d=t.includes(c.id),l=this.calculateBadgeProgress(c.id,a,o).percentage>=100;l&&!d?i.push(c):!l&&d&&s.push(c)}return{missingBadges:i,incorrectlyUnlocked:s,totalSessions:a.length,currentStreak:o}}catch(e){throw console.error("Error checking badge consistency:",e),e}}};function w(n,e="Partner"){const t=(d,m)=>{const l=new Date(d);return l.setHours(m,0,0,0),l.toISOString().replace(/[-:]/g,"").replace(/\.\d{3}/,"")},r=t(n.date,n.startTime),a=t(n.date,n.endTime),o=`${n.id}@gymbuddy.app`,i=`💪 Gym Session with ${e}`,s=`GymBuddy workout session\\n\\nTime: ${f(n.startTime)} - ${f(n.endTime)}\\n\\nDon't forget to bring:\\n- Water bottle\\n- Gym clothes\\n- Good energy!`;return["BEGIN:VCALENDAR","VERSION:2.0","PRODID:-//GymBuddy//EN","CALSCALE:GREGORIAN","METHOD:PUBLISH","BEGIN:VEVENT",`UID:${o}`,`DTSTART:${r}`,`DTEND:${a}`,`SUMMARY:${i}`,`DESCRIPTION:${s}`,"LOCATION:Gym","STATUS:CONFIRMED","BEGIN:VALARM","TRIGGER:-PT30M","ACTION:DISPLAY","DESCRIPTION:Gym session in 30 minutes!","END:VALARM","END:VEVENT","END:VCALENDAR"].join(`\r
`)}function D(n,e="Partner"){const t=w(n,e),r=new Blob([t],{type:"text/calendar;charset=utf-8"}),a=URL.createObjectURL(r),o=document.createElement("a");o.href=a,o.download=`gym-session-${n.date.toISOString().split("T")[0]}.ics`,document.body.appendChild(o),o.click(),document.body.removeChild(o),URL.revokeObjectURL(a)}function f(n){const e=n>=12?"PM":"AM";return`${n===0?12:n>12?n-12:n}:00 ${e}`}class C{gapi=null;isGoogleCalendarReady=!1;getConfig(){return{googleClientId:"42291494095-f7lij115hh9gs280ui65js2kib4r3tj4.apps.googleusercontent.com",googleClientSecret:"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",googleApiKey:"AIzaSyC3wgcN8E3ngs5fbAyPY5YBUhhY3hGF7xM"}}async initializeGoogleCalendar(){const e=this.getConfig();if(!e.googleClientId||!e.googleApiKey)return console.log("Google Calendar credentials not configured"),!1;try{return window.gapi||await this.loadGoogleAPIScript(),this.gapi=window.gapi,await this.gapi.load("client:auth2",async()=>{await this.gapi.client.init({apiKey:e.googleApiKey,clientId:e.googleClientId,discoveryDocs:["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"],scope:"https://www.googleapis.com/auth/calendar.events"})}),this.isGoogleCalendarReady=!0,!0}catch(t){return console.error("Failed to initialize Google Calendar:",t),!1}}loadGoogleAPIScript(){return new Promise((e,t)=>{if(document.querySelector('script[src*="apis.google.com"]')){e();return}const r=document.createElement("script");r.src="https://apis.google.com/js/api.js",r.onload=()=>e(),r.onerror=()=>t(new Error("Failed to load Google API script")),document.head.appendChild(r)})}async isGoogleSignedIn(){if(this.isGoogleCalendarReady||await this.initializeGoogleCalendar(),!this.gapi)return!1;const e=this.gapi.auth2.getAuthInstance();return e&&e.isSignedIn.get()}async signInToGoogle(){if(!this.isGoogleCalendarReady&&!await this.initializeGoogleCalendar())return!1;try{return await this.gapi.auth2.getAuthInstance().signIn(),!0}catch(e){return console.error("Google sign-in failed:",e),!1}}async createGoogleCalendarEvent(e,t,r="Partner"){try{if(!await this.isGoogleSignedIn()&&!await this.signInToGoogle())throw new Error("Google Calendar authentication required");const o=this.convertSessionToCalendarEvent(e,t,r);return(await this.gapi.client.calendar.events.insert({calendarId:"primary",resource:{summary:o.summary,description:o.description,start:{dateTime:o.startDateTime,timeZone:Intl.DateTimeFormat().resolvedOptions().timeZone},end:{dateTime:o.endDateTime,timeZone:Intl.DateTimeFormat().resolvedOptions().timeZone},location:o.location,attendees:o.attendees,reminders:{useDefault:!1,overrides:[{method:"popup",minutes:30},{method:"email",minutes:60}]}}})).result.id}catch(a){return console.error("Failed to create Google Calendar event:",a),null}}convertSessionToCalendarEvent(e,t,r){const a=(o,i)=>{const s=new Date(o);return s.setHours(i,0,0,0),s.toISOString()};return{id:e.id,summary:`💪 Gym Session with ${r}`,description:`GymBuddy workout session

Time: ${this.formatTime(e.startTime)} - ${this.formatTime(e.endTime)}

Don't forget to bring:
• Water bottle
• Gym clothes  
• Good energy!

Created by GymBuddy App`,startDateTime:a(e.date,e.startTime),endDateTime:a(e.date,e.endTime),location:"Gym",attendees:[{email:t,displayName:r}]}}formatTime(e){const t=e>=12?"PM":"AM";return`${e===0?12:e>12?e-12:e}:00 ${t}`}async createAppleCalendarEvent(e,t="Partner"){try{const r=w(e,t),a=new Blob([r],{type:"text/calendar;charset=utf-8"}),o=URL.createObjectURL(a),i=document.createElement("a");return i.href=o,i.download=`gym-session-${e.date.toISOString().split("T")[0]}.ics`,document.body.appendChild(i),i.click(),document.body.removeChild(i),URL.revokeObjectURL(o),!0}catch(r){return console.error("Failed to create Apple Calendar event:",r),!1}}async createCalendarEvents(e,t,r="Partner"){const a={google:null,apple:!1};try{a.google=await this.createGoogleCalendarEvent(e,t,r)}catch(o){console.error("Google Calendar creation failed:",o)}try{a.apple=await this.createAppleCalendarEvent(e,r)}catch(o){console.error("Apple Calendar creation failed:",o)}return a}async sendCalendarInvitation(e,t,r){try{const a=encodeURIComponent(`💪 Gym Session Invitation - ${this.formatTime(e.startTime)}`),o=encodeURIComponent(`Hi ${r}!

You've been invited to a gym session:

📅 Date: ${e.date.toLocaleDateString()}
⏰ Time: ${this.formatTime(e.startTime)} - ${this.formatTime(e.endTime)}
📍 Location: Gym

The calendar event is attached. You can also manually add this to your calendar.

See you at the gym! 💪

- GymBuddy`),i=`mailto:${t}?subject=${a}&body=${o}`;return window.open(i),!0}catch(a){return console.error("Failed to send calendar invitation:",a),!1}}async deleteGoogleCalendarEvent(e){try{return await this.isGoogleSignedIn()?(await this.gapi.client.calendar.events.delete({calendarId:"primary",eventId:e}),!0):!1}catch(t){return console.error("Failed to delete Google Calendar event:",t),!1}}isGoogleCalendarAvailable(){const e=this.getConfig();return!!(e.googleClientId&&e.googleApiKey)}async testCalendarIntegration(){const e={google:!1,apple:!0,email:!0};try{this.isGoogleCalendarAvailable()&&(e.google=await this.initializeGoogleCalendar())}catch(t){console.error("Google Calendar test failed:",t)}return e}}const b=new C,k=Object.freeze(Object.defineProperty({__proto__:null,calendarService:b},Symbol.toStringTag,{value:"Module"}));export{T as b,k as c,D as d,u as s};
